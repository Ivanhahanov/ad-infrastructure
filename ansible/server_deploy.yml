- name: Deploy all infrastructure on monitoring_server
  hosts: monitoring_server
  gather_facts: true
  become: true

  roles:
    - docker

  tasks:
    - name: Include vars from server_vars.yml file
      include_vars: ./vars/server_vars.yml

    - name: Check virtualization enabled
      shell: egrep -c '(vmx|svm)' /proc/cpuinfo
      register: virtualization_check

    - name: Number of processors that supports virtualization is
      debug:
        msg: "{{ virtualization_check.stdout }}"

    - name: Install KVM and libvirt
      apt:
        name: ['cpu-checker', 'qemu-kvm', 'libvirt-daemon-system', 'libvirt-clients', 'bridge-utils']
        state: present
        update_cache: yes
      when: virtualization_check.stdout | int > 0

    - name: Add username to libvirt and kvm groups
      command: sudo adduser {{ user }} {{ item }}
      loop:
        - libvirt
        - kvm

    - name: Check status of libvirtd and(or) enable it
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Install terraform dependencies
      apt:
        update_cache: yes
        name: ['gnupg', 'software-properties-common', 'curl']

    - name: Add the HashiCorp GPG key.
      shell: curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -

    - name: Add the official HashiCorp Linux repository.
      shell: sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

    - name: Install terraform
      apt:
        update_cache: yes
        name: terraform

    - name: Create ad-infrastructure dir on monitoring_server
      file:
        path: ~/ad-infrastructure
        state: directory
        mode: '0755'

    - name: Copy necessary directories to monitoring_server
      copy:
        src: ../{{ item }}
        dest: /home/{{ user }}/ad-infrastructure/
      with_items:
        - ansible
        - ad-infrastructure-api
        - ovpn-admin
        - monitoring
        - tasks
        - terraform
        - user_rsa
        - docker-compose.yml
        - network.xml.j2

    - name: Check that iso_image exists
      stat:
        path: /home/{{ user }}/ad-infrastructure/{{ iso_image }}
      register: image_check

    - name: Download .iso image if it doesn`t exists
      get_url:
        url:  '{{ wget_image }}'
        dest: /home/{{ user }}/ad-infrastructure/
        checksum: '{{ image_cheksum }}'
      when: not image_check.stat.exists


    - name: Resize .iso image
      command: chdir=/home/{{ user }}/ad-infrastructure sudo qemu-img resize {{ iso_image }} {{ image_size }}


    - name: Add system environment variables
      lineinfile:
        path: /home/{{ user }}/.bashrc
        line: "export {{ item.varname }}={{ item.varvalue }}"
      loop:
        - { varname: 'SERVER_IP', varvalue: '{{ server_ip }}' }
        - { varname: 'ADMIN_PASS', varvalue: '{{ admin_pass }}' }
      tags:
        - set_env_vars

    - name: OpenDistro max_map_count
      sysctl:
        name: vm.max_map_count
        value: 262144

    - name: Deploy docker-compose
      docker_compose:
        project_src: /home/{{ user }}/ad-infrastructure/
        build: yes
        files:
          - docker-compose.yml

    - name: Pause playbook to create new hosts
      pause:
        prompt: Please confirm you configure vm`s and ready to resume playbook

    - name: Build and run vm`s with terraform
      terraform:
        project_path: /home/{{ user }}/ad-infrastructure/
        state: present
        force_init: true
