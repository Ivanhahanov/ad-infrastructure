- name: Deploy all infrastructure on monitoring_server
  hosts: monitoring_server
  gather_facts: true
  become: true

  roles:
    - docker

  tasks:
    - name: Include vars from server_vars.yml file
      include_vars:
        dir: vars/
        extensions:
          - 'yml'
      tags:
        include_vars

    - name: Check virtualization enabled
      shell: egrep -c '(vmx|svm)' /proc/cpuinfo
      register: virtualization_check

    - name: Number of processors that supports virtualization is
      debug:
        msg: "{{ virtualization_check.stdout }}"

    - name: Install KVM and libvirt
      apt:
        name: ['cpu-checker', 'qemu-kvm', 'libvirt-daemon-system', 'libvirt-clients', 'bridge-utils']
        state: present
        update_cache: yes
      when: virtualization_check.stdout | int > 0

    - name: Add username to libvirt and kvm groups
      command: sudo adduser {{ user }} {{ item }}
      loop:
        - libvirt
        - kvm

    - name: Check status of libvirtd and(or) enable it
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Install terraform dependencies
      apt:
        update_cache: yes
        name: ['gnupg', 'software-properties-common', 'curl']

    - name: Add the HashiCorp GPG key.
      shell: curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -

    - name: Add the official HashiCorp Linux repository.
      shell: sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

    - name: Install terraform
      apt:
        update_cache: yes
        name: terraform

    - name: Create ad-infrastructure dir on monitoring_server
      file:
        path: ~/ad-infrastructure
        state: directory
        mode: '0755'

    - name: Upload necessary directories to monitoring_server
      copy:
        src: ../{{ item }}
        dest: /home/{{ user }}/ad-infrastructure/
      with_items:
        - ansible
        - ad-infrastructure-api
        - ovpn-admin
        - monitoring
        - tasks
        - terraform
        - user_rsa
        - docker-compose.yml
        - .env
        - network.xml.j2
        - vm_hosts.ini.j2
      tags: upload_files

    - name: Check that iso_image exists
      stat:
        path: /home/{{ user }}/ad-infrastructure/{{ iso_image }}
      register: image_check

    - name: Download .iso image if it doesn`t exists
      get_url:
        url:  '{{ wget_image }}'
        dest: /home/{{ user }}/ad-infrastructure/
      when: not image_check.stat.exists


    - name: Resize .iso image
      command: chdir=/home/{{ user }}/ad-infrastructure sudo qemu-img resize {{ iso_image }} {{ image_size }}

    - name: OpenDistro max_map_count user }}
      sysctl:
        name: vm.max_map_count
        value: 262144

    - name: Stop current containers
      docker_compose:
        project_src: /home/{{ user }}/ad-infrastructure/
        state: absent
      tags: deploy_api

    - name: Run api
      docker_compose:
        project_src: /home/{{ user }}/ad-infrastructure/
        build: yes
        services:
          - mongo
          - redis
          - openvpn
          - ovpn-admin
        debug: yes
      tags: deploy_api

    - name: Run ad-api
      docker_compose:
        project_src: /home/{{ user }}/ad-infrastructure/
        build: yes
        services:
          - ad-api
        debug: yes
      tags: deploy_api

    - name: Run monitoring
      docker_compose:
        project_src: /home/{{ user }}/ad-infrastructure/
        build: yes
        services:
          - node1
          - node2
          - kibana
          - logstash
        debug: yes
      tags: deploy_monitoring


    - name: Pause playbook to create networks
      pause:
        prompt: Please confirm you configure networks and ready to resume playbook

    - name: Define JSON response
      uri:
        url: "http://192.168.100.116:8000/api/v1/services/teams/info"  #  This is test URL, change in to your production URL
        method: GET
        headers:
          Content-Type: "application/json"
      ignore_errors: true
      register: result
      tags: get_result

    - name: Define networks
      virt_net:
        command: define
        name: "{{ item['name'] }}"
        xml: "{{ lookup('template', '../network.xml.j2') }}"
      with_items: "{{ result.json.teams }}"
      tags: setup_networks

    - name: Setting state of virtual networks
      virt_net:
        name: "{{ item['name'] }}"
        state: active
      with_items: "{{ result.json.teams }}"
      tags: setup_networks

    - name: Setting virtual networks to autostart
      virt_net:
        autostart: true
        name: "{{ item['name'] }}"
      with_items: "{{ result.json.teams }}"
      tags: setup_networks

    - name: Accept port forwarding for tun
      iptables:
        chain: FORWARD
        in_interface: tun+
        jump: ACCEPT

    - name: Define port forwarding from tun to team_br
      iptables:
        chain: FORWARD
        in_interface: tun+
        out_interface: team_br+
        match: state
        ctstate: RELATED, ESTABLISHED
        jump: ACCEPT

    - name: Define port forwarding from team_br to tun
      iptables:
        chain: FORWARD
        in_interface:  team_br+
        out_interface: tun+
        match: state
        ctstate: RELATED, ESTABLISHED
        jump: ACCEPT

    - name: Append chain
      iptables:
        chain: OUTPUT
        action: append
        out_interface: tun+
        jump: ACCEPT

    - name: Create hosts file for inner ansible-playbooks
      file:
        path: /home/{{ user }}/ad-infrastructure/ansible/vm_hosts.ini
        state: touch
        mode: '554'

    # - name: Template hosts file for inner ansible-playbooks
    #   template:
    #     src: /home/{{ user }}/ad-infrastructure/vm_hosts.ini.j2
    #     dest: /home/{{ user }}/ad-infrastructure/ansible/vm_hosts.ini
    #     mode:

    - name: Build and run vm`s with terraform
      terraform:
        project_path: /home/{{ user }}/ad-infrastructure/terraform/
        state: present
        force_init: true
      tags: terraform_deploy
